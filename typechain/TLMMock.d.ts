/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TLMMockInterface extends ethers.utils.Interface {
  functions: {
    "FYDAI()": FunctionFragment;
    "dai()": FunctionFragment;
    "gem()": FunctionFragment;
    "ilks(bytes32)": FunctionFragment;
    "sellGem(bytes32,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FYDAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "gem", values?: undefined): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sellGem",
    values: [BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FYDAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellGem", data: BytesLike): Result;

  events: {};
}

export class TLMMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TLMMockInterface;

  functions: {
    FYDAI(overrides?: CallOverrides): Promise<[string]>;

    "FYDAI()"(overrides?: CallOverrides): Promise<[string]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    "dai()"(overrides?: CallOverrides): Promise<[string]>;

    gem(overrides?: CallOverrides): Promise<[string]>;

    "gem()"(overrides?: CallOverrides): Promise<[string]>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

    sellGem(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sellGem(bytes32,address,uint256)"(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FYDAI(overrides?: CallOverrides): Promise<string>;

  "FYDAI()"(overrides?: CallOverrides): Promise<string>;

  dai(overrides?: CallOverrides): Promise<string>;

  "dai()"(overrides?: CallOverrides): Promise<string>;

  gem(overrides?: CallOverrides): Promise<string>;

  "gem()"(overrides?: CallOverrides): Promise<string>;

  ilks(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

  "ilks(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

  sellGem(
    ilk: BytesLike,
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sellGem(bytes32,address,uint256)"(
    ilk: BytesLike,
    usr: string,
    gemAmt: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FYDAI(overrides?: CallOverrides): Promise<string>;

    "FYDAI()"(overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    gem(overrides?: CallOverrides): Promise<string>;

    "gem()"(overrides?: CallOverrides): Promise<string>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { gemJoin: string; yield: BigNumber }>;

    sellGem(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sellGem(bytes32,address,uint256)"(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FYDAI(overrides?: CallOverrides): Promise<BigNumber>;

    "FYDAI()"(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    "dai()"(overrides?: CallOverrides): Promise<BigNumber>;

    gem(overrides?: CallOverrides): Promise<BigNumber>;

    "gem()"(overrides?: CallOverrides): Promise<BigNumber>;

    ilks(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellGem(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sellGem(bytes32,address,uint256)"(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FYDAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FYDAI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gem()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ilks(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellGem(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sellGem(bytes32,address,uint256)"(
      ilk: BytesLike,
      usr: string,
      gemAmt: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
