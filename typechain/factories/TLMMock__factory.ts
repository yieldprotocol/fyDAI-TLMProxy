/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TLMMock } from "../TLMMock";

export class TLMMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    dai_: string,
    fyDai_: string,
    overrides?: Overrides
  ): Promise<TLMMock> {
    return super.deploy(dai_, fyDai_, overrides || {}) as Promise<TLMMock>;
  }
  getDeployTransaction(
    dai_: string,
    fyDai_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(dai_, fyDai_, overrides || {});
  }
  attach(address: string): TLMMock {
    return super.attach(address) as TLMMock;
  }
  connect(signer: Signer): TLMMock__factory {
    return super.connect(signer) as TLMMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TLMMock {
    return new Contract(address, _abi, signerOrProvider) as TLMMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERC20Mock",
        name: "dai_",
        type: "address",
      },
      {
        internalType: "contract IFYDai",
        name: "fyDai_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FYDAI",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dai",
    outputs: [
      {
        internalType: "contract ERC20Mock",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gem",
    outputs: [
      {
        internalType: "contract IFYDai",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "ilks",
    outputs: [
      {
        internalType: "address",
        name: "gemJoin",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "yield",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "ilk",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gemAmt",
        type: "uint256",
      },
    ],
    name: "sellGem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161074e38038061074e8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606083811b821660805282901b1660a0526040518190610064906100ea565b6001600160a01b03909116815260405190819003602001906000f080158015610091573d6000803e3d6000fd5b5064465944414960d81b60009081526020527f784756658bac43aeede008208cd643d250e763cff74a01e6028a59852d926e7680546001600160a01b0319166001600160a01b0392909216919091179055506100f79050565b61023c8061051283390190565b60805160601c60a05160601c6103ed6101256000398061017152508061029b528061039552506103ed6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063cb8ec2a311610050578063cb8ec2a3146100b7578063d9638d36146100f6578063f4b9fa751461014357610067565b80631a3fed601461006c5780637bd2bea714610086575b600080fd5b61007461014b565b60408051918252519081900360200190f35b61008e61016f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610074600480360360608110156100cd57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff6020820135169060400135610193565b6101136004803603602081101561010c57600080fd5b5035610361565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b61008e610393565b7f465944414900000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f465944414900000000000000000000000000000000000000000000000000000084146101c157600080fd5b7f4659444149000000000000000000000000000000000000000000000000000000600090815260208190527f784756658bac43aeede008208cd643d250e763cff74a01e6028a59852d926e7654604080517ff2d5d56b000000000000000000000000000000000000000000000000000000008152336004820152602481018690529051859373ffffffffffffffffffffffffffffffffffffffff9093169263f2d5d56b926044808201939182900301818387803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1985836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b5092979650505050505050565b6000602081905290815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212201883436cb9f2a2a889a1ce36623126680f4109ab1dba61f7829c6ea9fbc13f1a64736f6c634300060a003360a060405234801561001057600080fd5b5060405161023c38038061023c8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166101d161006b6000398060a9528061012052506101d16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637bd2bea71461003b578063f2d5d56b1461006c575b600080fd5b6100436100a7565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100a56004803603604081101561008257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356100cb565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301523060248301526044820184905291517f0000000000000000000000000000000000000000000000000000000000000000909216916323b872dd916064808201926020929091908290030181600087803b15801561016b57600080fd5b505af115801561017f573d6000803e3d6000fd5b505050506040513d602081101561019557600080fd5b5050505056fea264697066735822122066508644842736e3858c025a3023cea551ebd6ae3f278f7f8d4c7209cd29f2f764736f6c634300060a0033";
