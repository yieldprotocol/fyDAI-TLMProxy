/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TLMProxyInterface extends ethers.utils.Interface {
  functions: {
    "assets(uint256,bytes32)": FunctionFragment;
    "borrow(bytes32,uint256,bytes32,address,uint256)": FunctionFragment;
    "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)": FunctionFragment;
    "controller()": FunctionFragment;
    "fetch(uint256,bytes32)": FunctionFragment;
    "gemJoins(bytes32)": FunctionFragment;
    "register(uint256,bytes32)": FunctionFragment;
    "tlm()": FunctionFragment;
    "tlmProxy()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BytesLike, BigNumberish, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowWithSignature",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetch",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gemJoins", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tlm", values?: undefined): string;
  encodeFunctionData(functionFragment: "tlmProxy", values?: undefined): string;

  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gemJoins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tlm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tlmProxy", data: BytesLike): Result;

  events: {
    "SeriesRegistered(uint256,bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SeriesRegistered"): EventFragment;
}

export class TLMProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: TLMProxyInterface;

  functions: {
    assets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "assets(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    borrow(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(bytes32,uint256,bytes32,address,uint256)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrowWithSignature(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    fetch(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "fetch(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    gemJoins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "gemJoins(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    register(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tlm(overrides?: CallOverrides): Promise<[string]>;

    "tlm()"(overrides?: CallOverrides): Promise<[string]>;

    tlmProxy(overrides?: CallOverrides): Promise<[string]>;

    "tlmProxy()"(overrides?: CallOverrides): Promise<[string]>;
  };

  assets(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "assets(uint256,bytes32)"(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  borrow(
    collateral: BytesLike,
    maturity: BigNumberish,
    ilk: BytesLike,
    to: string,
    fyDaiToBorrow: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(bytes32,uint256,bytes32,address,uint256)"(
    collateral: BytesLike,
    maturity: BigNumberish,
    ilk: BytesLike,
    to: string,
    fyDaiToBorrow: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrowWithSignature(
    collateral: BytesLike,
    maturity: BigNumberish,
    ilk: BytesLike,
    to: string,
    fyDaiToBorrow: BigNumberish,
    controllerSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)"(
    collateral: BytesLike,
    maturity: BigNumberish,
    ilk: BytesLike,
    to: string,
    fyDaiToBorrow: BigNumberish,
    controllerSig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  fetch(
    maturity: BigNumberish,
    ilk: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  "fetch(uint256,bytes32)"(
    maturity: BigNumberish,
    ilk: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  gemJoins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "gemJoins(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  register(
    maturity: BigNumberish,
    ilk: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(uint256,bytes32)"(
    maturity: BigNumberish,
    ilk: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tlm(overrides?: CallOverrides): Promise<string>;

  "tlm()"(overrides?: CallOverrides): Promise<string>;

  tlmProxy(overrides?: CallOverrides): Promise<string>;

  "tlmProxy()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "assets(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    borrow(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrow(bytes32,uint256,bytes32,address,uint256)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowWithSignature(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    fetch(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "fetch(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    gemJoins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "gemJoins(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    register(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tlm(overrides?: CallOverrides): Promise<string>;

    "tlm()"(overrides?: CallOverrides): Promise<string>;

    tlmProxy(overrides?: CallOverrides): Promise<string>;

    "tlmProxy()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    SeriesRegistered(
      maturity: BigNumberish | null,
      ilk: BytesLike | null,
      fyDai: null,
      gemJoin: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { maturity: BigNumber; ilk: string; fyDai: string; gemJoin: string }
    >;
  };

  estimateGas: {
    assets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assets(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(bytes32,uint256,bytes32,address,uint256)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrowWithSignature(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetch(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetch(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gemJoins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "gemJoins(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tlm(overrides?: CallOverrides): Promise<BigNumber>;

    "tlm()"(overrides?: CallOverrides): Promise<BigNumber>;

    tlmProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "tlmProxy()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assets(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assets(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(bytes32,uint256,bytes32,address,uint256)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrowWithSignature(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrowWithSignature(bytes32,uint256,bytes32,address,uint256,bytes)"(
      collateral: BytesLike,
      maturity: BigNumberish,
      ilk: BytesLike,
      to: string,
      fyDaiToBorrow: BigNumberish,
      controllerSig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetch(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetch(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gemJoins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gemJoins(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(uint256,bytes32)"(
      maturity: BigNumberish,
      ilk: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tlm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tlm()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tlmProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tlmProxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
