/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PotAbstractInterface extends ethers.utils.Interface {
  functions: {
    "Pie()": FunctionFragment;
    "cage()": FunctionFragment;
    "chi()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "drip()": FunctionFragment;
    "dsr()": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "live()": FunctionFragment;
    "pie(address)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "rho()": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Pie", values?: undefined): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "chi", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "drip", values?: undefined): string;
  encodeFunctionData(functionFragment: "dsr", values?: undefined): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "file",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "pie", values: [string]): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "rho", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "Pie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dsr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "file", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rho", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {};
}

export class PotAbstract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: PotAbstractInterface;

  functions: {
    Pie(overrides?: CallOverrides): Promise<[BigNumber]>;

    "Pie()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    cage(overrides?: Overrides): Promise<ContractTransaction>;

    "cage()"(overrides?: Overrides): Promise<ContractTransaction>;

    chi(overrides?: CallOverrides): Promise<[BigNumber]>;

    "chi()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

    "deny(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    drip(overrides?: Overrides): Promise<ContractTransaction>;

    "drip()"(overrides?: Overrides): Promise<ContractTransaction>;

    dsr(overrides?: CallOverrides): Promise<[BigNumber]>;

    "dsr()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    join(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "join(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    "live()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pie(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "pie(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rely(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

    "rely(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rho(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rho()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    "vat()"(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    "vow()"(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  Pie(overrides?: CallOverrides): Promise<BigNumber>;

  "Pie()"(overrides?: CallOverrides): Promise<BigNumber>;

  cage(overrides?: Overrides): Promise<ContractTransaction>;

  "cage()"(overrides?: Overrides): Promise<ContractTransaction>;

  chi(overrides?: CallOverrides): Promise<BigNumber>;

  "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

  deny(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

  "deny(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  drip(overrides?: Overrides): Promise<ContractTransaction>;

  "drip()"(overrides?: Overrides): Promise<ContractTransaction>;

  dsr(overrides?: CallOverrides): Promise<BigNumber>;

  "dsr()"(overrides?: CallOverrides): Promise<BigNumber>;

  exit(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "exit(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  join(arg0: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "join(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  "live()"(overrides?: CallOverrides): Promise<BigNumber>;

  pie(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "pie(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rely(arg0: string, overrides?: Overrides): Promise<ContractTransaction>;

  "rely(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rho(overrides?: CallOverrides): Promise<BigNumber>;

  "rho()"(overrides?: CallOverrides): Promise<BigNumber>;

  vat(overrides?: CallOverrides): Promise<string>;

  "vat()"(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  "vow()"(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wards(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Pie(overrides?: CallOverrides): Promise<BigNumber>;

    "Pie()"(overrides?: CallOverrides): Promise<BigNumber>;

    cage(overrides?: CallOverrides): Promise<void>;

    "cage()"(overrides?: CallOverrides): Promise<void>;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

    deny(arg0: string, overrides?: CallOverrides): Promise<void>;

    "deny(address)"(arg0: string, overrides?: CallOverrides): Promise<void>;

    drip(overrides?: CallOverrides): Promise<BigNumber>;

    "drip()"(overrides?: CallOverrides): Promise<BigNumber>;

    dsr(overrides?: CallOverrides): Promise<BigNumber>;

    "dsr()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    join(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "join(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    pie(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pie(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rely(arg0: string, overrides?: CallOverrides): Promise<void>;

    "rely(address)"(arg0: string, overrides?: CallOverrides): Promise<void>;

    rho(overrides?: CallOverrides): Promise<BigNumber>;

    "rho()"(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<string>;

    "vat()"(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    "vow()"(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    Pie(overrides?: CallOverrides): Promise<BigNumber>;

    "Pie()"(overrides?: CallOverrides): Promise<BigNumber>;

    cage(overrides?: Overrides): Promise<BigNumber>;

    "cage()"(overrides?: Overrides): Promise<BigNumber>;

    chi(overrides?: CallOverrides): Promise<BigNumber>;

    "chi()"(overrides?: CallOverrides): Promise<BigNumber>;

    deny(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "deny(address)"(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    drip(overrides?: Overrides): Promise<BigNumber>;

    "drip()"(overrides?: Overrides): Promise<BigNumber>;

    dsr(overrides?: CallOverrides): Promise<BigNumber>;

    "dsr()"(overrides?: CallOverrides): Promise<BigNumber>;

    exit(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    join(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "join(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    "live()"(overrides?: CallOverrides): Promise<BigNumber>;

    pie(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "pie(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rely(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "rely(address)"(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    rho(overrides?: CallOverrides): Promise<BigNumber>;

    "rho()"(overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    "vat()"(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    "vow()"(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Pie(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "Pie()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cage(overrides?: Overrides): Promise<PopulatedTransaction>;

    "cage()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    chi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(arg0: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "deny(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    drip(overrides?: Overrides): Promise<PopulatedTransaction>;

    "drip()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    dsr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dsr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    join(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "join(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "live()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pie(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pie(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(arg0: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "rely(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rho()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vat()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vow()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
