/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IControllerInterface extends ethers.utils.Interface {
  functions: {
    "addDelegate(address)": FunctionFragment;
    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "borrow(bytes32,uint256,address,address,uint256)": FunctionFragment;
    "containsSeries(uint256)": FunctionFragment;
    "debtDai(bytes32,uint256,address)": FunctionFragment;
    "debtFYDai(bytes32,uint256,address)": FunctionFragment;
    "delegated(address,address)": FunctionFragment;
    "erase(bytes32,address)": FunctionFragment;
    "inDai(bytes32,uint256,uint256)": FunctionFragment;
    "inFYDai(bytes32,uint256,uint256)": FunctionFragment;
    "isCollateralized(bytes32,address)": FunctionFragment;
    "locked(bytes32,address)": FunctionFragment;
    "post(bytes32,address,address,uint256)": FunctionFragment;
    "posted(bytes32,address)": FunctionFragment;
    "repayDai(bytes32,uint256,address,address,uint256)": FunctionFragment;
    "repayFYDai(bytes32,uint256,address,address,uint256)": FunctionFragment;
    "series(uint256)": FunctionFragment;
    "seriesIterator(uint256)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "totalDebtDai(bytes32,address)": FunctionFragment;
    "totalSeries()": FunctionFragment;
    "treasury()": FunctionFragment;
    "withdraw(bytes32,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addDelegateBySignature",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BytesLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "containsSeries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtDai",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "debtFYDai",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegated",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "erase",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "inDai",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inFYDai",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCollateralized",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "posted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDai",
    values: [BytesLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFYDai",
    values: [BytesLike, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "series",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seriesIterator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDebtDai",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSeries",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegateBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "containsSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtFYDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inFYDai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollateralized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayFYDai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "series", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "seriesIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDebtDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: IControllerInterface;

  functions: {
    addDelegate(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDelegate(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addDelegateBySignature(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    borrow(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "borrow(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    containsSeries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "containsSeries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    debtDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "debtFYDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    erase(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "erase(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    inDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "inDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "inFYDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isCollateralized(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCollateralized(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    locked(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "locked(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    post(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "post(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    posted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "posted(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    repayDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repayFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "repayFYDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    series(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "series(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    seriesIterator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "seriesIterator(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    totalDebtDai(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalDebtDai(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSeries(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSeries()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addDelegate(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDelegate(address)"(
    arg0: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addDelegateBySignature(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  borrow(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "borrow(bytes32,uint256,address,address,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  containsSeries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "containsSeries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  debtDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtDai(bytes32,uint256,address)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtFYDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "debtFYDai(bytes32,uint256,address)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegated(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "delegated(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  erase(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "erase(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  inDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "inDai(bytes32,uint256,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inFYDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "inFYDai(bytes32,uint256,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isCollateralized(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCollateralized(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  locked(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "locked(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  post(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "post(bytes32,address,address,uint256)"(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  posted(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "posted(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  repayDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayDai(bytes32,uint256,address,address,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repayFYDai(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "repayFYDai(bytes32,uint256,address,address,uint256)"(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  series(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "series(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  seriesIterator(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "seriesIterator(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  totalDebtDai(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalDebtDai(bytes32,address)"(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSeries(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSeries()"(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(bytes32,address,address,uint256)"(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addDelegate(arg0: string, overrides?: CallOverrides): Promise<void>;

    "addDelegate(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDelegateBySignature(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    containsSeries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "containsSeries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    debtDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtFYDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    erase(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "erase(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    inDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "inDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "inFYDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralized(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCollateralized(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    locked(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    post(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "post(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    posted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "posted(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repayFYDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    series(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "series(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    seriesIterator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seriesIterator(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    "shutdown()"(overrides?: CallOverrides): Promise<void>;

    totalDebtDai(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDebtDai(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSeries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSeries()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addDelegate(arg0: string, overrides?: Overrides): Promise<BigNumber>;

    "addDelegate(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addDelegateBySignature(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    borrow(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "borrow(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    containsSeries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "containsSeries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "debtFYDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    erase(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "erase(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    inDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "inDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "inFYDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCollateralized(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCollateralized(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "locked(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    post(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "post(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    posted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "posted(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repayDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repayFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "repayFYDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    series(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "series(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seriesIterator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seriesIterator(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shutdown(overrides?: Overrides): Promise<BigNumber>;

    "shutdown()"(overrides?: Overrides): Promise<BigNumber>;

    totalDebtDai(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalDebtDai(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSeries(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSeries()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDelegate(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDelegate(address)"(
      arg0: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addDelegateBySignature(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    borrow(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "borrow(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    containsSeries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "containsSeries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "debtFYDai(bytes32,uint256,address)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erase(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "erase(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    inDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inFYDai(bytes32,uint256,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCollateralized(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCollateralized(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "locked(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    post(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "post(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    posted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "posted(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repayFYDai(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "repayFYDai(bytes32,uint256,address,address,uint256)"(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    series(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "series(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seriesIterator(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seriesIterator(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    totalDebtDai(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDebtDai(bytes32,address)"(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSeries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSeries()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes32,address,address,uint256)"(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
