/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DelegableInterface extends ethers.utils.Interface {
  functions: {
    "DELEGABLE_DOMAIN()": FunctionFragment;
    "SIGNATURE_TYPEHASH()": FunctionFragment;
    "addDelegate(address)": FunctionFragment;
    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegated(address,address)": FunctionFragment;
    "revokeDelegate(address)": FunctionFragment;
    "signatureCount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGABLE_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addDelegateBySignature",
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegated",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGABLE_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegateBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureCount",
    data: BytesLike
  ): Result;

  events: {
    "Delegate(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
}

export class Delegable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: DelegableInterface;

  functions: {
    DELEGABLE_DOMAIN(overrides?: CallOverrides): Promise<[string]>;

    "DELEGABLE_DOMAIN()"(overrides?: CallOverrides): Promise<[string]>;

    SIGNATURE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "SIGNATURE_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    addDelegate(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addDelegateBySignature(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeDelegate(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signatureCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "signatureCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DELEGABLE_DOMAIN(overrides?: CallOverrides): Promise<string>;

  "DELEGABLE_DOMAIN()"(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "SIGNATURE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  addDelegate(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDelegate(address)"(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addDelegateBySignature(
    user: string,
    delegate: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
    user: string,
    delegate: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegated(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "delegated(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeDelegate(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeDelegate(address)"(
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signatureCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "signatureCount(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DELEGABLE_DOMAIN(overrides?: CallOverrides): Promise<string>;

    "DELEGABLE_DOMAIN()"(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "SIGNATURE_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    addDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    "addDelegate(address)"(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDelegateBySignature(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeDelegate(delegate: string, overrides?: CallOverrides): Promise<void>;

    "revokeDelegate(address)"(
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "signatureCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Delegate(
      user: string | null,
      delegate: string | null,
      enabled: null
    ): TypedEventFilter<
      [string, string, boolean],
      { user: string; delegate: string; enabled: boolean }
    >;
  };

  estimateGas: {
    DELEGABLE_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    "DELEGABLE_DOMAIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "SIGNATURE_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addDelegate(delegate: string, overrides?: Overrides): Promise<BigNumber>;

    "addDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addDelegateBySignature(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeDelegate(delegate: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signatureCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "signatureCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGABLE_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DELEGABLE_DOMAIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDelegate(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addDelegateBySignature(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDelegateBySignature(address,address,uint256,uint8,bytes32,bytes32)"(
      user: string,
      delegate: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegated(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegated(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeDelegate(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeDelegate(address)"(
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signatureCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signatureCount(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
